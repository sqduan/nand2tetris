// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Let's first deal with the A register, the input of A register comes from
    // three parts: the old A(dA), the constant in instruction[1..15] and the output
    // of ALU, thus we need 2 mux to select the input of register A.
    Mux16(a = dA, b = aluOut, sel = instruction[10], out = inA1);
    // Deal with A instruction, for the A instruction, it loads a constant into
    // Register A
    Mux16(a[0] = 0, a[1..15] = instruction[1..15], b = inA1, sel = instruction[0], out = inA);
    Register(in = inA, load = true, out = A, out = dA);    // Register A

    // Then we deal with the D register, the value of D register comes from two pars:
    // the old D(dD) and the aluOut
    Mux16(a = dD, b = aluOut, sel = instruction[11], out = inD);
    Register(in = inD, load = true, out = D, out = dD);    // Register D

    // Also, we use instruction[13] to determine whether we use A or inM as our second opt number
    Mux16(a = A, b = inM, sel = instruction[3], out = AorM);

    // Now we get all the input for the ALU, we will create an ALU to execute arithmetic operation to
    // the input opt number, the operation defined in instruction[4..9]
    ALU(x = D, y = AorM, zx = instruction[4], nx = instruction[5], zy = instruction[6],
                      ny = instruction[7], f  = instruction[8], no = instruction[9],
                      out = aluOut, zr = zr, ng = ng);

    // Check if the result needs to be stored in RAM[A] by instruction[12]
    Mux(a = false, b = true, sel = instruction[12], out = writeM);

    // Jump check
    PC(in = , load = , inc = , reset = reset, out =);
    
}