// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU, consisting of an ALU,two registers named A and D,
 * and a program counter named PC. The CPU is designed to fetch and execute
 * instructions written in the Hack machine language. 
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Part1: deal with A and D registers
    // Let's first deal with the A register, the input of A register comes from
    // two parts: the constant in instruction[1..15] and the output
    // of ALU, thus we need a mux to select the input of register A.
    Mux16(a[0..14] = instruction[0..14], a[15] = false, b = aluOut, sel = instruction[15], out = inA);

    // If instruction is an A-type instruction or load to A bit is true, then we load A
    Not(in = instruction[15], out = ATypeInstruction);
    Or(a = ATypeInstruction, b = instruction[5], out = loadA);
    ARegister(in = inA, load = loadA, out = A, out[0..14] = addressM);    // Register A

    // Then we deal with the D register, the value of D register comes from the aluOut
    And(a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = aluOut, load = loadD, out = D);                        // Register D

    // Check whether the result should be stored in memory
    And(a = instruction[15], b = instruction[3], out = writeM);

    // Part2: Arithmetic logic dealing
    // we use instruction[12] to determine whether we use A or inM as our second opt number
    Mux16(a = A, b = inM, sel = instruction[12], out = AorM);

    // Now we get all the input for the ALU, we will create an ALU to execute arithmetic operation to
    // the input opt number, the operation defined in instruction[4..9]
    ALU(x = D, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9],
                      ny = instruction[8], f  = instruction[7], no = instruction[6],
                      out = aluOut, out = outM, zr = zr, ng = ng);

    // Recode another two state of the ALU's output
    Not(in = zr, out = notZr);
    Not(in = ng, out = notNg);
    And(a = notZr, b = notNg, out = ps);    // Not zero, not negative, a positive number

    // Part3: conditional jump
    // The conditions of PC is quite complex, let's discuss them one by one
    // 1. The reset signal comes from outsize
    // 2. If the instruction is a C-type instruction and contains jump, load is true, and
    //    the jump dest is A. After calculation, the jump control is
    //    jmp = (j3 & ps) Nand(j1, j2) | (j2 & zr) Nand(j1, j3) | (j1 & ng) Nand(j2, j3) | j1j2j3
    // 3. Otherwise do inc
    Nand(a = instruction[2], b = instruction[1], out = nandJ1J2);
    Nand(a = instruction[2], b = instruction[0], out = nandJ1J3);
    Nand(a = instruction[1], b = instruction[0], out = nandJ2J3);
    
    And(a = instruction[0], b = ps, out = greaterZero);    // aluOut >  0
    And(a = instruction[1], b = zr, out = equalZero);      // aluOut == 0
    And(a = instruction[2], b = ng, out = lessZero);       // aluOut <  0

    And(a = greaterZero, b = nandJ1J2, out = greaterJmp);  // JMP because aluOut >  0
    And(a = equalZero,   b = nandJ1J3, out = equalJmp);    // JMP because aluOut == 0
    And(a = lessZero,    b = nandJ2J3, out = lessJmp);     // JMP because aluOut <  0

    // Unconditional jump
    And(a = instruction[2], b = instruction[1], out = andJ1J2);
    And(a = instruction[2], b = instruction[0], out = andJ1J3);
    And(a = andJ1J2, b = andJ1J3, out = unconditionalJmp);

    // Now we combine all the jmp condition and get the final jmp control signal
    Or(a = greaterJmp, b = equalJmp,         out = jmp1);
    Or(a = lessJmp,    b = unconditionalJmp, out = jmp2);
    Or(a = jmp1,       b = jmp2,             out = jmp3);
    And(a = jmp3,      b = instruction[15],  out = jmp);   // Only C-Type instruction can jmp 

    PC(in = A, load = jmp, inc = true, reset = reset, out[0..14] = pc);

}